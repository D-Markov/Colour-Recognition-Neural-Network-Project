from src.Mathematics.Matrix import Matrix
from MatrixTestCase import MatrixTestCase
from src.Model.Network import Network
from src.Model.Layer import Layer
from src.Mathematics.Model_Calculations import cost, error_prime


class Network_test(MatrixTestCase):
    def setUp(self) -> None:
        self.W1 = Matrix([[ 0.36321467, -0.13679289, -0.11810279, -0.23992308,  0.19351103,
        -0.5146397 ,  0.39015177, -0.17021104,  0.07133931, -0.05576091,
         0.32693727, -0.46066147, -0.07209468, -0.08587716,  0.25351855,
        -0.24594316, -0.03855612, -0.19629511,  0.00943928,  0.13032144],
       [-0.24610593,  0.255968  ,  0.20160181,  0.11236115,  0.20143751,
        -0.1528862 , -0.02747909, -0.20924441, -0.0599016 ,  0.11859109,
        -0.15466005, -0.08871679, -0.15365649, -0.18899373, -0.1500952 ,
        -0.00283189, -0.24983819,  0.05241694,  0.37114305,  0.16592612],
       [-0.04289573, -0.19847987, -0.16706967,  0.37844435,  0.01136096,
        -0.14243656,  0.04269   ,  0.46963133,  0.02686836,  0.13801081,
         0.06712012, -0.07876546, -0.25547484, -0.07811541, -0.04671017,
         0.13117293,  0.18760239,  0.20820075,  0.06385927,  0.19792358],
       [-0.16868851,  0.28014984,  0.11469459, -0.06665558,  0.10923598,
        -0.01689835,  0.25304002,  0.33984137,  0.48870952, -0.31226607,
        -0.32291366, -0.112802  ,  0.03578538,  0.19591733,  0.07057812,
        -0.45217794, -0.0684693 ,  0.18514076,  0.05145075,  0.17039088],
       [-0.04971408, -0.04489087,  0.0417164 ,  0.09169034,  0.04434117,
         0.02661114, -0.14996465,  0.08442583,  0.02724006,  0.25256028,
         0.26808619,  0.04140223, -0.08391627, -0.14282446,  0.09469622,
         0.01729377, -0.07688802,  0.00974855, -0.1386364 ,  0.15608471]])
        self.B1 = Matrix([[0.], [0.], [0.], [0.], [0.]])

        self.W2 = Matrix([[-0.19996197,  0.54761649,  0.18044695,  0.26545639, -0.48965946]])
        self.B2 = Matrix([[0.]])

        self.train_set_x = Matrix([[1.62434536, -0.61175641, -0.52817175, -1.07296862, 0.86540763, -2.3015387, 1.74481176],
            [-0.7612069 , 0.3190391, -0.24937038, 1.46210794, -2.06014071, -0.3224172, -0.38405435],
            [1.13376944, -1.09989127, -0.17242821, -0.87785842, 0.04221375, 0.58281521, -1.10061918],
            [ 1.14472371, 0.90159072, 0.50249434, 0.90085595, -0.68372786, -0.12289023, -0.93576943],
            [-0.26788808, 0.53035547, -0.69166075, -0.39675353, -0.6871727, -0.84520564, -0.67124613],
            [-0.0126646, -1.11731035, 0.2344157 , 1.65980218, 0.74204416, -0.19183555, -0.88762896],
            [-0.74715829, 1.6924546,  0.05080775, -0.63699565, 0.19091548, 2.10025514, 0.12015895],
            [0.61720311, 0.30017032, -0.35224985, -1.1425182, -0.34934272, -0.20889423, 0.58662319],
            [0.83898341, 0.93110208, 0.28558733, 0.88514116, -0.75439794, 1.25286816, 0.51292982],
            [-0.29809284, 0.48851815, -0.07557171, 1.13162939, 1.51981682, 2.18557541, -1.39649634],
            [-1.44411381, -0.50446586, 0.16003707, 0.87616892, 0.31563495, -2.02220122, -0.30620401],
            [0.82797464, 0.23009474, 0.76201118, -0.22232814, -0.20075807, 0.18656139, 0.41005165],
            [0.19829972, 0.11900865, -0.67066229, 0.37756379, 0.12182127, 1.12948391, 1.19891788],
            [0.18515642, -0.37528495, -0.63873041, 0.42349435, 0.07734007, -0.34385368, 0.04359686],
            [-0.62000084, 0.69803203, -0.44712856, 1.2245077 , 0.40349164, 0.59357852, -1.09491185],
            [0.16938243, 0.74055645, -0.9537006, -0.26621851, 0.03261455, -1.37311732, 0.31515939],
            [0.84616065, -0.85951594, 0.35054598, -1.31228341, -0.03869551, -1.61577235, 1.12141771],
            [0.40890054, -0.02461696, -0.77516162, 1.27375593, 1.96710175, -1.85798186, 1.23616403],
            [1.62765075, 0.3380117, -1.19926803, 0.86334532, -0.1809203, -0.60392063, -1.23005814],
            [0.5505375, 0.79280687, -0.62353073, 0.52057634, -1.14434139, 0.80186103, 0.0465673 ]])
        self.train_set_y = Matrix([[-0.18656977, -0.10174587, 0.86888616, 0.75041164, 0.52946532, 0.13770121, 0.07782113]])

        self.expected_W1 = Matrix([[ 0.36323487, -0.13681289, -0.11810332, -0.2399075 ,  0.19350479,
        -0.51469112,  0.39020775, -0.17017667,  0.07139532, -0.05575124,
         0.3268555 , -0.46063915, -0.07204686, -0.08588028,  0.25351177,
        -0.24592884, -0.0385627 , -0.19629864,  0.00946108,  0.1303685 ],
       [-0.24617715,  0.25603144,  0.20156286,  0.11227348,  0.20143884,
        -0.1527616 , -0.02760269, -0.20934217, -0.06005215,  0.11855739,
        -0.15442681, -0.08878607, -0.15375697, -0.18898914, -0.15008236,
        -0.00288045, -0.24982675,  0.05242914,  0.37102009,  0.16579358],
       [-0.04292689, -0.19845777, -0.16707328,  0.37842914,  0.01136557,
        -0.14238876,  0.04264682,  0.46959624,  0.02681977,  0.13801013,
         0.06719514, -0.07878771, -0.25551647, -0.07811397, -0.04669831,
         0.13115631,  0.18759943,  0.20819955,  0.0638347 ,  0.19788219],
       [-0.16875617,  0.28018386,  0.11469056, -0.06668331,  0.10923725,
        -0.01682986,  0.25299324,  0.33978677,  0.48864498, -0.31225229,
        -0.32281423, -0.11283589,  0.03573264,  0.19591664,  0.07060046,
        -0.45221363, -0.06848722,  0.18512237,  0.05140432,  0.17033493],
       [-0.04964696, -0.04495106,  0.04172833,  0.09175562,  0.04433044,
         0.02647285, -0.14982196,  0.08452398,  0.02739558,  0.25258589,
         0.26785665,  0.0414707 , -0.08379868, -0.1428332 ,  0.0946775 ,
         0.01733933, -0.07689979,  0.00974022, -0.13855069,  0.15621566]])
        self.expected_B1 = Matrix([[ 5.14909138e-05], [-1.35770379e-04], [-4.52316841e-05], [-6.37707714e-05], [ 1.45198481e-04]])

        self.expected_W2 = Matrix([[-0.20063374,  0.54691788,  0.1796375 ,  0.26450398, -0.49014712]])
        self.expected_B2 = Matrix([[-0.00123536]])


    def test_Network(self):
        layers = [
            Layer("sigmoid", "sigmoid_prime", self.W1, self.B1),
            Layer("sigmoid", "sigmoid_prime", self.W2, self.B2)]

        network = Network(layers)
        network.train(self.train_set_x, self.train_set_y, cost, error_prime, 0.005)

        self.assertMatrixAreEqual(layers[0].weights, self.expected_W1)
        self.assertMatrixAreEqual(layers[0].biases, self.expected_B1)
        self.assertMatrixAreEqual(layers[1].weights, self.expected_W2)
        self.assertMatrixAreEqual(layers[1].biases, self.expected_B2)