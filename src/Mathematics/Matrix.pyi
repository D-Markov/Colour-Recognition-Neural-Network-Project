from typing import Callable, Sequence, Union, List
import array

Scalar = Union[int, float]

class Matrix(Sequence[List[float]]):
    def __init__(self, inputs: Union[List[List[int]], List[List[float]], array.array[float]], rows: Union[int, None] = ..., colomns: Union[int, None] = ...) -> None: ...

    def __len__(self) -> int: ...
    
    def __getitem__(self, i: int) -> List[float]: ...

    def __str__(self) -> str: ...
        
    def __repr__(self) -> str: ...

    def __add__(self, other: Union[Matrix, Scalar]) -> Matrix: ...

    def __radd__(self, other: Union[Matrix, Scalar]) -> Matrix: ...
    
    def __sub__(self, other: Union[Matrix, Scalar]) -> Matrix: ...
    
    def __rsub__(self, other: Union[Matrix, Scalar]) -> Matrix: ...
 
    @property
    def rows(self) -> int: ...
 
    @property
    def colomns(self) -> int: ...

    @staticmethod
    def zeroMatrix(rows: int, colomns: int) -> Matrix: ...

    @staticmethod
    def randomMatrix(rows: int, colomns: int) -> Matrix: ...
 
    def dot(self, MatB: Matrix) -> Matrix: ...

    def rowsSum(self) -> Matrix: ...

    def rtocol(self) -> Matrix: ...
    
    def sum(self) -> Scalar: ...

    def multiply(self, other: Union[Scalar, Matrix]) -> Matrix: ...

    def divide(self, other: Union[Scalar, Matrix]) -> Matrix: ...

    def apply(self, func: Callable[[Scalar], Scalar]) -> Matrix: ...
